using System.Text;
using CppAst;

namespace BindingGenerator;

public static class TypeGenerator
{
    private static readonly IReadOnlyList<string> PredefinedCandidates = new List<string>()
    {
        "String",
        "size_t",
    };

    private static readonly IReadOnlyList<string> GenerateCandidates = new List<string>()
    {
        "Color"
    };

    private const string GenerateDirectory = "OpenSiv3D/Siv3D/src/Siv3D/Script/Bind_Generated/";

    public static void Generate(CppCompilation ast, string rootPath)
    {
        var s3d = ast.Namespaces.First(n => n.Name == "s3d");
        if (s3d == null)
        {
            Console.WriteLine("Could not find the s3d namespace.");
            return;
        }

        var sb = new StringBuilder();
        foreach (var class_ in s3d.Classes)
        {
            if (GenerateCandidates.Contains(class_.Name))
            {
                generateClass(class_, rootPath);
            }
        }

        // var outputFile = Path.Combine(rootPath, "BindingGenerator/output.txt");
        // File.WriteAllText(outputFile, sb.ToString());
        //
        // Console.WriteLine(sb.ToString());
    }

    private static string stringifyType(CppType type)
    {
        if (type is CppTypedef typedef)
        {
            if (typedef.ElementType is CppTypedef) return stringifyType(typedef.ElementType);
            return typedef.Name;
        }
        else
        {
            throw new NotImplementedException("stringifyType not implemented.");
        }
    }


    private static void generateClass(CppClass class_, string rootPath)
    {
        string className = class_.Name;
        string includePath = Utils.ExtractRelativePath(class_.SourceFile, "Siv3D");


        var binds = new StringBuilder();

        foreach (var field in class_.Fields)
        {
            binds.AppendLine(
                $$"""
                  bind.property("{{stringifyType(field.Type)}} {{field.Name}}", &{{className}}::{{field.Name}});
                  """);
        }

        // foreach (var function in class_.Functions)
        // {
        //     binds.Append(
        //         $"{function.Name}({string.Join(", ", function.Parameters.Select(p => p.Type.ToString()))})");
        // }

        string content =
            $$"""
              //-----------------------------------------------
              //
              //	This file is part of the Siv3D Engine.
              //
              //	Copyright (c) 2008-2025 Ryo Suzuki
              //	Copyright (c) 2016-2025 OpenSiv3D Project
              //
              //	Licensed under the MIT License.
              //
              //-----------------------------------------------

              // This file is auto-generated by asSiv3D

              # include <Siv3D/Script.hpp>
              # include <{{includePath}}>

              # include <asbind20/asbind.hpp>
              # include <asbind20/operators.hpp>

              namespace s3d
              {
                  using namespace AngelScript;

                  std::function<void()> ScriptRegister_{{className}}(asIScriptEngine* engine)
                  {
                      using namespace asbind20;
                      auto bind = asbind20::value_class<{{className}}>(engine, "{{className}}", asOBJ_POD | asOBJ_APP_CLASS_ALLINTS);
                      bind.behaviours_by_traits();
                      
                      return [engine, bind]() mutable{
                          {{binds.ToString().Replace(Environment.NewLine, Environment.NewLine + "            ")}}
                      };
                  }
              }
              """;

        var outputFile = Path.Combine(rootPath, GenerateDirectory + $"script_{className}.generated.cpp");
        File.WriteAllText(outputFile, content);

        Console.WriteLine(content);
    }
}